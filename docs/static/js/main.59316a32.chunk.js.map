{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","console","log","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAwB/C,OACI,sBAAMC,SAhBW,SAACC,GAGlBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAI5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAzBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCTjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEjBC,QAAQC,IAAI,wBAAyBH,GAE/BI,EAJW,iDAIqCC,UAAUL,GAJ/C,+DAKOM,MAAQF,GALf,cAKXG,EALW,OAOjBL,QAAQC,IAAIC,GAPK,SAUMG,EAAUC,OAVhB,uBAUTC,EAVS,EAUTA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBzB,kBAqBVM,GArBU,4CAAH,sDCETO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAEI,sBAAKc,UAAU,sDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGtBE,QAAQC,IAAI,wBAAyBH,GAHA,MCFb,SAAEA,GAE1BE,QAAQC,IAAI,6BAA8BH,GAFF,MAIdd,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAN2B,mBAIjCC,EAJiC,KAI1BC,EAJ0B,KAwBxC,OAfAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACtB,IAIGuB,EDjB2BK,CAAa5B,GAAjCe,EALuB,EAK7BN,KAAca,EALe,EAKfA,QAGtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDlB,EAApD,OAEEsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAUYH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,aADA,CACC,EAAD,eAGYA,GAFCA,EAAIC,aE7BhCgB,EAAe,WAAM,MAIM3C,mBAAS,CAAC,cAJhB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAO9B,OAFAiB,QAAQC,IAAI2B,GAIR,qCACI,8CAEA,cAAC,EAAD,CACQ7C,cAAgBA,IAGxB,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAAAX,GAAQ,OACM,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCnBzD+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.59316a32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        \r\n        //console.log('Agregar categoria');\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n\r\n            //setCategories( [...categories, inputValue]  );\r\n            //como la siguiente funcion tiene un callback no necesita el estado anterior de la categorias\r\n            setCategories( cats => [inputValue , ...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n         </form> \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","  export const getGifs = async ( category ) => {\r\n\r\n        console.log('Categoria en GetGif: ', category);\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=66qX9SHlDu2DhkZDBFFJKld5pmCUOpyo`;\r\n        const respuesta = await fetch ( url );\r\n        \r\n        console.log(url);   \r\n\r\n        //Como me interesa la data , de la data accedo en el const\r\n        const { data } = await respuesta.json();\r\n        //console.log(data);\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;        \r\n    }\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n    //console.log(url);\r\n    \r\n    return (\r\n\r\n        <div className=\"animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n   \r\n    console.log('Categoria en GifGrid:', category);\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                            \r\n                    {/* {\r\n                        images.map( img => {\r\n                            return <li key={img.id} > {img.title} </li> \r\n                                    \r\n                        } )\r\n                    }  */}\r\n                    \r\n                    {\r\n                        images.map( img => (\r\n                            // <li key={id} > {title} </li> \r\n                            <GifGridItem \r\n                                    key={img.id}\r\n                                    //img={ img }\r\n                                    {...img}\r\n                            />\r\n                        ))\r\n                    }          \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    console.log('Category en useFetchGifs: ', category);\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n    //console.log(state);\r\n\r\n    return state; // { data:[], loading: true }\r\n    \r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['Samurai X']);\r\n    console.log(categories);\r\n\r\n    return (  \r\n\r\n        <>  \r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory\r\n                    setCategories={ setCategories } \r\n            />\r\n\r\n            <hr />\r\n            \r\n            <ol>\r\n                {                                         \r\n                    categories.map( category =>                                            \r\n                                                  <GifGrid \r\n                                                    key={category}\r\n                                                    category={category}                                             \r\n                                                     /> \r\n                                    )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp /> ,\n  document.getElementById('root')\n);"],"sourceRoot":""}